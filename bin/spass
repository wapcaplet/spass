#!/usr/bin/env ruby

require 'spass'
require 'optparse'

HELP = <<EOF

This script generates passphrases using random words from the given dictionary
file (default: /usr/share/dict/words). It was inspired by http://xkcd.com/936/

Examples:

    $ spass -w 3            # Generate 3-word phrases
    $ spass -w 5 -n 20      # Generate twenty 5-word phrases
    $ spass -c 6            # Limit words to 6 characters
    $ spass -d              # Append a digit to each word
    $ spass -f mywords.txt  # Get words from mywords.txt (one per line)

Passphrases generated from dictionary words are inherently vulnerable to
dictionary attacks; using more and/or longer words strengthens them against
such attacks. The default settings are intended to yield relatively strong,
easy-to-remember passphrases.

EOF

options = {
  :number => 10,
  :dict => '/usr/share/dict/words',
  :digits => false,
  :chars => 8,
  :words => 4,
}

optparse = OptionParser.new do |opts|
  opts.on('-w', '--words [NUM]', Integer,
          "Ensure passphrases are at least NUM words long.",
          "Default: #{options[:words]}") do |words|
    options[:words] = words
  end

  opts.on('-n', '--number [NUM]', Integer,
          "Generate NUM passphrases.",
          "Default: #{options[:number]}") do |num|
    options[:number] = num
  end

  opts.on('-f', '--file [FILE]', String,
          "Read words from a FILE having one word per line.",
          "Default: #{options[:dict]}") do |dict|
    options[:dict] = dict
  end

  opts.on('-d', '--digits',
          "Append a random digit from 0-9 to each word.",
          "Default: #{options[:digits]}") do |digits|
    options[:digits] = digits
  end

  opts.on('-c', '--chars NUM',
          "Limit words to NUM characters in length.",
          "Default: #{options[:chars]}") do |chars|
    options[:chars] = chars
  end

  opts.on_tail('-h', '--help', 'Display the help page') do
    puts opts
    puts HELP
    exit 0
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts optparse
  puts "*** #{e}"
  exit 1
end

sp = Generator.new(options[:dict], options)
puts "Read #{sp.dict.count} words up to #{sp.chars} characters long from #{sp.file}"
options[:number].times do
  puts sp.generate(options[:words], :digits=>options[:digits])
end

